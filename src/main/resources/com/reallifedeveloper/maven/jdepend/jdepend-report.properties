jdepend.name=JDepend
jdepend.description=JDepend traverses Java class file directories and generates design quality metrics for each Java package. \
    JDepend allows you to automatically measure the quality of a design in terms of its extensibility, reusability, and maintainability \
    to manage package dependencies effectively.

report.title=JDepend Metrics Report
report.intro=The following document contains the results of a <a href="https://github.com/clarkware/jdepend">JDepend</a> metric analysis. \
    The various metrics are defined at the bottom of this document.

report.summary.title=Summary
report.package=Package
report.TC=TC
report.CC=CC
report.AC=AC
report.Ca=Ca
report.Ce=Ce
report.A=A
report.I=I
report.D=D
report.cycles=Cycles
report.package-info=package-info

report.packages=Packages
report.abstractclasses=Abstract Classes
report.concreteclasses=Concrete Classes
report.usedbypackages=Used by Packages
report.usespackage=Uses Packages
report.nopackages=There are no packages used.
report.nocyclicdependencies=There are no cyclic dependencies.

report.explanation.title=Explanation
report.explanation.description=The following explanations are for quick reference and are lifted directly from the original JDepend \
    documentation. For more information, see the <a href="https://en.wikipedia.org/wiki/Software_package_metrics">Wikipedia</a> page.
report.term=Term
report.description=Description
report.numberofclasses.title=Number of Classes (TC, CC, AC)
report.numberofclasses.description=The number of concrete and abstract classes (and interfaces) in the package is an indicator of the \
    extensibility of the package.
report.afferentcouplings.title=Afferent Couplings (Ca)
report.afferentcouplings.description=The number of incoming dependencies, i.e., other packages that depend upon classes within the \
    package. This is an indicator of the package's responsibility.
report.efferentcouplings.title=Efferent Couplings (Ce)
report.efferentcouplings.description=The number of outgoing dependencies, i.e., other packages that the classes in the package depend \
    upon. This is an indicator of the package's independence.
report.abstractness.title=Abstractness (A)
report.abstractness.description=The ratio of the number of abstract classes (and interfaces) in the analyzed package to the total number \
    of classes in the analyzed package. The range for this metric is 0 to 1, with A=0 indicating a completely concrete package and A=1 \
    indicating a completely abstract package.
report.instability.title=Instability (I)
report.instability.description=The ratio of efferent coupling (Ce) to total coupling (Ce / (Ce + Ca)). This metric is an indicator of \
    the package's resilience to change. The range for this metric is 0 to 1, with I=0 indicating a completely stable package and I=1 \
    indicating a completely instable package.
report.distance.title=Distance (D)
report.distance.description=The perpendicular distance of a package from the idealized line A + I = 1. This metric is an indicator of \
    the package's balance between abstractness and stability. A package squarely on the main sequence is optimally balanced with respect \
    to its abstractness and stability. Ideal packages are either completely abstract and stable (x=0, y=1) or completely concrete and \
    instable (x=1, y=0). The range for this metric is 0 to 1, with D=0 indicating a package that is coincident with the main sequence \
    and D=1 indicating a package that is as far from the main sequence as possible.
report.cycles.title=Cycles
report.cycles.description=Packages participating in a package dependency cycle are in a deadly embrace with respect to reusability and \
    their  release cycle. Package dependency cycles can be easily identified by reviewing the textual reports of dependency cycles. Once \
    these dependency cycles have been identified with JDepend, they can be broken by employing various object-oriented techniques.
report.packageinfo.title=Package Info
report.packageinfo.description=A flag showing if there is a package-info class in the package. This is useful for package-level \
    documentation, as well as being a home for package-level annotations.
